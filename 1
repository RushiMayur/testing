class TicTacToe:
    def __init__(self):
        self.board = [[' ']*3 for _ in range(3)]  # Initialize empty 3x3 board
        self.current_player = 'O'

    def print_board(self):
        for row in self.board:
            print('|'.join(row))
            print('-'*5)

    def is_winner(self, player):
        for i in range(3):
            # Check rows and columns
            if all(self.board[i][j] == player for j in range(3)) or \
               all(self.board[j][i] == player for j in range(3)):
                return True

        # Check diagonals
        if all(self.board[i][i] == player for i in range(3)) or \
           all(self.board[i][2-i] == player for i in range(3)):
            return True

        return False

    def is_board_full(self):
        return all(self.board[i][j] != ' ' for i in range(3) for j in range(3))

    def is_game_over(self):
        if self.is_winner('X'):
            print("AI Player (X) wins!")
            return True
        elif self.is_winner('O'):
            print("Player (O) wins!")
            return True
        elif self.is_board_full():
            print("It's a draw!")
            return True
        return False

    def get_empty_cells(self):
        return [(i, j) for i in range(3) for j in range(3) if self.board[i][j] == ' ']

    def minimax(self, depth, maximizing_player):
        if self.is_winner('X'):
            return 1
        elif self.is_winner('O'):
            return -1
        elif self.is_board_full():
            return 0

        if maximizing_player:
            max_eval = float('-inf')
            for move in self.get_empty_cells():
                self.board[move[0]][move[1]] = 'X'
                eval = self.minimax(depth + 1, False)
                self.board[move[0]][move[1]] = ' '  # Undo the move
                max_eval = max(max_eval, eval)
            return max_eval
        else:
            min_eval = float('inf')
            for move in self.get_empty_cells():
                self.board[move[0]][move[1]] = 'O'
                eval = self.minimax(depth + 1, True)
                self.board[move[0]][move[1]] = ' '  # Undo the move
                min_eval = min(min_eval, eval)
            return min_eval

    def dfs(self):
        best_val = float('-inf')
        best_move = None

        for move in self.get_empty_cells():
            self.board[move[0]][move[1]] = 'X'
            move_val = self.minimax(0, False)
            self.board[move[0]][move[1]] = ' '  # Undo the move

            if move_val > best_val:
                best_move = move
                best_val = move_val

        self.board[best_move[0]][best_move[1]] = 'X'
        print("\nAI Player (X) makes a move:")
        self.print_board()

if __name__ == "__main__":
    game = TicTacToe()

    while not game.is_game_over():
        print("\nCurrent Tic-Tac-Toe Board:")
        game.print_board()

        if game.current_player == 'O':
            row = int(input("Enter row (0, 1, or 2): "))
            col = int(input("Enter column (0, 1, or 2): "))
            if game.board[row][col] == ' ':
                game.board[row][col] = 'O'
            else:
                print("Invalid move. Try again.")
                continue
        else:
            game.dfs()

        game.current_player = 'O' if game.current_player == 'X' else 'X'
